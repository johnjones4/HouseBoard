/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Info"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Info: {
            files?: components["schemas"]["Files"];
            events?: components["schemas"]["Events"];
            forecast?: components["schemas"]["Forecast"];
            trello?: components["schemas"]["Trello"];
            weatherStation?: components["schemas"]["WeatherStation"];
            traffic?: components["schemas"]["Traffic"];
            summary?: components["schemas"]["Summary"];
        };
        Summary: {
            summary: string;
        };
        Files: {
            files: string[];
        };
        Event: {
            title: string;
            /** Format: date-time */
            start: string;
            /** Format: date-time */
            end: string;
            label: string;
        };
        Events: {
            events: components["schemas"]["Event"][];
        };
        Forecast: {
            /** Format: uri */
            radarURL: string;
            forecast: components["schemas"]["ForecastPeriod"][];
            alerts: string[];
        };
        ForecastPeriod: {
            /** Format: date-time */
            datetime: string;
            /** Format: double */
            temperature: number;
            /** Format: double */
            feelsLike: number;
            /** Format: double */
            windSpeed: number;
            /** Format: double */
            probabilityOfPrecipitation: number;
            /** Format: double */
            relativeHumidity: number;
            /** Format: double */
            pressure: number;
        };
        TrafficDestination: {
            destination: string;
            /** @description Expected travel duration in seconds. */
            expectedDuration: number;
            /** @description Estimated travel duration in seconds based on current conditions. */
            estimatedDuration: number;
        };
        Traffic: {
            destinations: components["schemas"]["TrafficDestination"][];
        };
        Trello: {
            list: components["schemas"]["List"][];
        };
        List: {
            cards: components["schemas"]["Card"][];
            name: string;
        };
        Card: {
            id: string;
            name: string;
        };
        WeatherStation: {
            /**
             * Format: date-time
             * @description The timestamp of the weather station data.
             */
            timestamp: string;
            /**
             * Format: double
             * @description Average wind speed measured by the anemometer.
             */
            anemometerAverage: number;
            /**
             * Format: double
             * @description Minimum wind speed measured by the anemometer.
             */
            anemometerMin: number;
            /**
             * Format: double
             * @description Maximum wind speed measured by the anemometer.
             */
            anemometerMax: number;
            /**
             * Format: double
             * @description Current temperature in degrees Celsius.
             */
            temperature: number;
            /**
             * Format: double
             * @description Gas concentration level measured.
             */
            gas: number;
            /**
             * Format: double
             * @description Relative humidity percentage.
             */
            relativeHumidity: number;
            /**
             * Format: double
             * @description Atmospheric pressure in hPa.
             */
            pressure: number;
            /**
             * Format: double
             * @description Wind direction in degrees from the vane.
             */
            vaneDirection: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
